#+TITLE: emacs configuration
#+AUTHOR: sewh

* About This Config

*Note: to navigate this file on GitHub use the navigator on the top left.*

This document is written in [[https://orgmode.org/][org-mode]], a very powerful package for Emacs that many regard as its 'killer feature'. At its core, =org-mode= is a markup language like markdown. However it has deep integration into Emacs that makes it much more powerful. One very cool features of =org-mode= is that it lets you embed source code blocks in documents and then evaluate them. This lets us write a document with Emacs lisp in it and then load it as our configuration file. This is called a [[https://harryrschwartz.com/2016/02/15/switching-to-a-literate-emacs-configuration][literate Emacs config]].

* Using This Config

You need to download this file, =configuration.org=, the =init.el= file and put them both into =~/.emacs.d/=. If you already have an =init.el= then just make sure that this line is in there somewhere:

#+begin_src
    (org-babel-load-file (concat user-emacs-directory "configuration.org"))
#+end_src

This will make sure this config is loaded at init time.

* Easy Config Reloading

The first thing we're going to add is a command to reload the config file to save some typing:

#+begin_src emacs-lisp
  (defun reload-config ()
    (interactive)
    (org-babel-load-file (concat user-emacs-directory "configuration.org")))
#+end_src

Reloading the config can now be done with =M-x reload-config=.

* A Note on Emacs

I thought I'd write a few words in case anyone reading isn't living the Emacs dream and wonders why in the age of Vim, VSCode, IntelliJ, etc, we would even consider using Emacs.

In a word: trust. Trust that *Emacs is unlikely to contain any user-hostile functionality* and trust that *Emacs will be actively maintained for the foreseeable future, so time invested in learning Emacs is unlikely to be wasted*.

The first point is very important. Emacs is developed by volunteers and sponsored by the GNU project. It is Free Software and the source code is available. There is nothing up the developer's sleeve. Compare this to VSCode:

- Which /isn't/ open source (if you use the official build from the VSCode website);
- Many of the official extensions that make VSCode usable are not open source (e.g. the C++, remote development, and C# extensions are all closed source);
- Microsoft prevents open source builds from installing closed source extensions, making the closed-source version of VSCode really the only viable version for many people;
- The closed source extensions operate in strange ways. As an example, the remote SSH development plugin downloads a closed source blob to the target computer and executes it - Emacs by comparison just uses SFTP;
- Telemetry is enabled by default, and even disabled some Telemetry is still left active. Also, even if telemetry is disabled, some plugins will happily beacon back home anyway.

Not great!

The second point is about software survivability. Yes Emacs is a little bit of a learning curve but it will very likely last you your career. The initial release of GNU Emacs was 1976, almost 50 years ago. The idea of learning a tool once and being able to depend on it indefinitely is very appealing.

So trust is a big factor. But trust alone is not the only reason to use Emacs. Emacs has a massive and thriving ecosystem of packages that not only add support for new languages, but can also add completely new features to the editor itself. Many of them are best in class, like =org-mode= and Magit. It's also very easy to write a small bit of code and support some bespoke bit of your workflow. There is no other editor as powerful as Emacs.

* Package Management

** Package Repositories

The default package repository is a little bit bare, and most interesting packages are hosted in [[https://melpa.org/][MELPA]]. We add MELPA as an available package repository:
   
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
#+end_src

** Installing use-package

=use-package= is a nice little package to help install and configure Emacs packages. If it's not installed, we refresh our package cache and install it:
   
#+begin_src emacs-lisp
  (unless (require 'use-package nil 'noerror)
    (package-refresh-contents)
    (package-install 'use-package))
#+end_src

* Appearance

** Setting the Font

My currently preferred font is Fira Code, and size 14 is a decent size for me. Adding this to the ~default-frame-alist~ ensures that this font is the default for all Emacs frames.
  
#+begin_src emacs-lisp
  (setq default-frame-alist '((font . "Fira Code-14")))
#+end_src

** Setting the Theme

#+begin_src emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config (load-theme 'dracula t))
#+end_src

** Remove the Toolbar and Scrollbar

I don't like the toolbar or the scrollbar so I disable them:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (tool-bar-mode -1)
    (scroll-bar-mode -1))
#+end_src

I keep the menu bar around because it does come in handy every now and then. However, it just takes up space in a non-interactive CLI session so I disable it when not running graphically.

#+begin_src emacs-lisp
  (unless (display-graphic-p)
    (menu-bar-mode -1))
#+end_src

** System Bell

No thank you. Disable!

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Blinking Cursor

I don't like blinking cursors. Get it gone!

#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

* Movement
** Better Window Movement

Using C-o to move around windows can be a pain. Using windmove lets you move around with arrow keys instead.

#+begin_src emacs-lisp
(windmove-default-keybindings 'meta)
#+end_src

* Basic Text and File Options

** Tabs and Spaces

I prefer to use spaces instead of tabs:

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Emacs also doesn't indent on the 'Enter' key by default. That's easily changed with a key binding:

#+begin_src emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** Automatically Updating Files When They Change on Disk

#+begin_src emacs-lisp
(global-auto-revert-mode)
#+end_src

* Basic Programming Language Options

** Line Numbers

Line numbers are great for programming but not so great for other modes, like =org-mode= and terminals. Therefore we only turn on line number mode when we're in the fundamental programming mode:

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
#+end_src

** Automatically Adding Parenthesis

I find it  useful to have Emacs automatically add parenthesis, especially when messing around with Emacs lisp. Instead of using the built-in packages, I use one called [[https://github.com/Fuco1/smartparens][smartparens]] since it's a little bit smarter:

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (require 'smartparens-config)
    (smartparens-global-mode))
#+end_src

* Emacs Under the Hood

** Custom File

Emacs stores some configuration in a file, that by default is the =init.el= file. This makes vendoring the =init.el= in Git tricky, so we can change it to its own file:

#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (when (file-exists-p custom-file)
    (load-file custom-file))

#+end_src

** Backups

Emacs defaults to storing backup files in the same directory as the file being edited. This can create a jumble of files and confuse git. This little bit of configuration ensures that backup files are stored in Emacs' working directory instead:
  
#+begin_src emacs-lisp
  (setq backup-directory (concat user-emacs-directory "backups"))

  (unless (file-directory-p backup-directory)
    (mkdir backup-directory))

  (setq backup-directory-alist
        `((".*" . ,backup-directory)))
#+end_src

* Platform Specific Changes

** Hash Key

Sometimes Mac keyboards make it difficult to enter in a hash symbol. To (sort of) get around this, I add a new keybinding it enter a hash key.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c 3") (lambda () (interactive) (insert "#")))
#+end_src

* Spell Checking

Emacs has a built in, live, spellchecker called Flyspell. We use flyspell for org mode configuration later on, so we need to make sure it's configured to use an English (GB) dictionary:

#+begin_src emacs-lisp
  (setq ispell-dictionary "british")
#+end_src

* Ivy

The default Emacs minibuffer is fine, but the Ivy package really improves it. With Ivy, you get completions, previews, and many other packages integrate with it.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t))
#+end_src

Ivy also powers a replacement for the default =C-s= search that's really powerful and a great way to navigate around code called Swiper. We download that as well.

#+begin_src emacs-lisp
  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))
#+end_src

Finally, we can use another Ivy powered tool called 'Counsel' to add some extra functionality to Emacs. I like =counsel-rg= because it lets me search a directory with [[https://github.com/BurntSushi/ripgrep][ripgrep]], perhaps the fastest search tool around, with a Swiper-like interface.

#+begin_src emacs-lisp
  (use-package counsel
    :ensure t
    :bind (("C-c k" . counsel-rg)))
#+end_src

* Org Mode

org-mode is the package that this very config is written in. It's pretty good out of the box, but I feel that it benefits from a bit of configuration. Ideally, I'd like org-mode to:

- Wrap lines nicely;
- Use a spellchecking program;
- Set the default location for org mode files in =~/org/=;
- Enable org-specific indentation rules;
- Add a default set of languages to the evaluation allow list.

#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-directory "~/org")
    :config
    (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                         '((python . t)
                                           (shell . t))))
    :hook ((org-mode . flyspell-mode)
           (org-mode . org-indent-mode)
           (org-mode . visual-line-mode))
    )
#+end_src

* Magit

Magit is a helper for managing Git repositories. It is another Emacs 'killer feature' and makes frequent Git commands really fast to execute.

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status))
    :hook ((magit-mode . magit-auto-revert-mode)))
#+end_src

* Dired

Dired is Emacs' built-in file management tool. It is basically the output from ~ls~ but actionable. Basic file operations are really quick in Dired. Another benefit of Dired is that it integrates with [[https://www.emacswiki.org/emacs/TrampMode][TRAMP mode]], so you can list and modify directories on remote hosts over SSH (and all the other protocols that TRAMP supports).

One of the nice, non-default, behaviours of Dired is that you can open two Dired buffers side by side and copy between them with the 'C' key. We enable this here:

#+begin_src emacs-lisp
  (setq dired-dwim-target t)
#+end_src

I also find myself needing to create files in the dired UI which isn't supported by default. I've chosen 't' for 'touch'.

#+begin_src emacs-lisp
  (define-key dired-mode-map (kbd "t")
    (lambda (file-name)
      (interactive "sTouch file: ")
      (shell-command
       (concat "touch " (dired-current-directory) "/" file-name))
      (revert-buffer)))
#+end_src
* vterm

Emacs has a built in terminal emulator, but it's not a /true/ VTY emulator and struggles with some of the more involved commands. There's a package called =vterm= which provides a much more robust terminal emulator.

#+begin_src emacs-lisp
  (use-package vterm
    :ensure t)
#+end_src

I have also written a quick function to make a new vterm with a specific buffer name. This is really useful when you need to start multiple terminal emulators:

#+begin_src emacs-lisp
  (defun vterm-named (name)
    (interactive "sTerminal name: ")
    (let ((term-name (concat "vterm-" name)))
      (vterm term-name)))

  (global-set-key (kbd "C-x v") #'vterm-named)
#+end_src

* Docker

Emacs doesn't yet have a Dockerfile mode, so we need to fetch one:

#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src

* Python

We leave most of the Python heavy lifting to LSP mode (documented later on). However, there's a helpful package for managing virtual environments that's very handy. I'm a user of [[https://python-poetry.org/][Poetry]], so I point the ~venv-location~ variable at the directory that Poetry stores its virtual environments.

#+begin_src emacs-lisp
  (use-package virtualenvwrapper
    :ensure t
    :config
    (venv-initialize-interactive-shells)
    (setq venv-location (concat (getenv "HOME") "/.cache/pypoetry/virtualenvs")))
#+end_src

* YAML

Emacs doesn't yet have an in-built YAML mode so we need to install one:

#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t)
#+end_src

* Markdown

There's quite a nice mode for Markdown support, so let's install it:

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+end_src

* Rust

Ensure we have the package for editing Rust mode. Completion will be handled by LSP mode:

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src

* Company Mode

Company is a completion UI framework. LSP mode will use Company to do inline completions.

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-dabbrev-downcase 0)
    (setq company-idle-delay 0)
    )
#+end_src

* Flycheck

Flycheck is an error checking framework for Emacs. It's useful to get feedback on errors with code.

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
#+end_src

* wgrep

=wgrep= lets you edit recursive grep buffers and commit your changes back to those files. Really useful for bulk renaming things.

#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t)
#+end_src

* Clojure

Ensure we hae a mode for editing Clojure and CIDER for interactive development.

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t)

  (use-package cider
    :ensure t)
#+end_src

* nftables

The modern Linux firewall is nftables, and it has its own syntax. We should support this (because emacs doesn't do a good job of managing it on its own.)

#+begin_src emacs-lisp
  (use-package nftables-mode
    :ensure t)
#+end_src
